{"ast":null,"code":"// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await axios.post(API_BASE_URL, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error adding product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error updating product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\n\n//     // Log status for debugging\n//     console.log(\"Response status:\", response.status);\n\n//     // Check if response is ok (status 200-299)\n//     if (!response.ok) {\n//       // Try to get text content to see the error\n//       const textContent = await response.text();\n//       console.error(\"Error response:\", textContent);\n//       throw new Error(`HTTP error! Status: ${response.status}`);\n//     }\n\n//     // Only try to parse JSON if we got a successful response\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error);\n//     throw error;\n//   }\n// };\n\n// // Remove or fix the allProducts function since getAllProducts is better implemented\n// // If you need to keep both for backward compatibility:\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// // Add authentication token if needed\n// const getAuthHeader = () => {\n//   const token = localStorage.getItem('token');\n//   return token ? { Authorization: `Bearer ${token}` } : {};\n// };\n\n// // Function to add a new product\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await fetch('/api/products', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error adding product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to delete a product\n// export const deleteProduct = async (productId) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'DELETE',\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to update a product\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error updating product:', error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\n//       headers: getAuthHeader()\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\n//   }\n// };\n\n// // For backward compatibility\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// // Method to count products in a specific category\n// export const countProductsByCategory = async (categoryId) => {\n//    try {\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n//      headers: getAuthHeader()\n//    });\n//      return response.data;\n//     } catch (error) {\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\n//        if (error.response?.status === 404) {\n\n//         return 0; // Or handle the not found case as needed\n//    }\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\n//    }\n//   };\n\n//   // Function to search products by name\n// export const searchProductsByName = async (name) => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\n//       params: { name },\n//       headers: getAuthHeader(),\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\n//   }\n// };\n\nimport axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// Add authentication token if needed\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\nconst API_BASE_URL = 'http://localhost:8080/api/products';\nexport const addProduct = async productData => {\n  console.log('Adding product with data:', productData);\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData),\n      credentials: 'include' // Send session cookie (JSESSIONID)\n    });\n    console.log('Response status:', response.status);\n    const responseText = await response.text();\n    console.log('Response body:', responseText);\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${responseText}`);\n    }\n    return JSON.parse(responseText);\n  } catch (error) {\n    console.error('Error adding product:', error);\n    throw error;\n  }\n};\nexport const updateProduct = async (productId, productData) => {\n  console.log('Updating product ID:', productId, 'with data:', productData);\n  try {\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData),\n      credentials: 'include' // Send session cookie (JSESSIONID)\n    });\n    console.log('Response status:', response.status);\n    const responseText = await response.text();\n    console.log('Response body:', responseText);\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${responseText}`);\n    }\n    return JSON.parse(responseText);\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error;\n  }\n};\nexport const deleteProduct = async productId => {\n  console.log('Deleting product ID:', productId);\n  try {\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'DELETE',\n      credentials: 'include' // Send session cookie (JSESSIONID)\n    });\n    console.log('Response status:', response.status);\n    const responseText = await response.text();\n    console.log('Response body:', responseText);\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${responseText}`);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    throw error;\n  }\n};\nexport const getAllProducts = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}?size=100`, {\n      credentials: 'include' // Optional, since GET is permitAll()\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    throw error;\n  }\n};\n\n// Method to count products in a specific category\nexport const countProductsByCategory = async categoryId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3, _error$response3$data;\n    console.error(`Error counting products in category ${categoryId}:`, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n      return 0; // Or handle the not found case as needed\n    }\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || `Failed to count products in category ${categoryId}`);\n  }\n};\n\n// Function to search products by name\nexport const searchProductsByName = async name => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/search`, {\n      params: {\n        name\n      },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response5, _error$response5$data;\n    console.error(\"Error searching products by name:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to search products by name');\n  }\n};","map":{"version":3,"names":["axios","getAuthHeader","token","localStorage","getItem","Authorization","API_BASE_URL","addProduct","productData","console","log","response","fetch","method","headers","body","JSON","stringify","credentials","status","responseText","text","ok","Error","parse","error","updateProduct","productId","deleteProduct","getAllProducts","statusText","json","countProductsByCategory","categoryId","get","data","_error$response","_error$response2","_error$response3","_error$response3$data","message","searchProductsByName","name","params","_error$response4","_error$response5","_error$response5$data"],"sources":["C:/Users/salah/Downloads/project - Copie/src/services/productService.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await axios.post(API_BASE_URL, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    \r\n//     // Log status for debugging\r\n//     console.log(\"Response status:\", response.status);\r\n\r\n//     // Check if response is ok (status 200-299)\r\n//     if (!response.ok) {\r\n//       // Try to get text content to see the error\r\n//       const textContent = await response.text();\r\n//       console.error(\"Error response:\", textContent);\r\n//       throw new Error(`HTTP error! Status: ${response.status}`);\r\n//     }\r\n\r\n//     // Only try to parse JSON if we got a successful response\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Remove or fix the allProducts function since getAllProducts is better implemented\r\n// // If you need to keep both for backward compatibility:\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// // Add authentication token if needed\r\n// const getAuthHeader = () => {\r\n//   const token = localStorage.getItem('token');\r\n//   return token ? { Authorization: `Bearer ${token}` } : {};\r\n// };\r\n\r\n// // Function to add a new product\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await fetch('/api/products', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to delete a product\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to update a product\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\r\n//       headers: getAuthHeader()\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\r\n//   }\r\n// };\r\n\r\n// // For backward compatibility\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // Method to count products in a specific category\r\n// export const countProductsByCategory = async (categoryId) => {\r\n//    try {\r\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n//      headers: getAuthHeader()\r\n//    });\r\n//      return response.data;\r\n//     } catch (error) {\r\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n//        if (error.response?.status === 404) {\r\n  \r\n//         return 0; // Or handle the not found case as needed\r\n//    }\r\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n//    }\r\n//   };\r\n  \r\n\r\n//   // Function to search products by name\r\n// export const searchProductsByName = async (name) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\r\n//       params: { name },\r\n//       headers: getAuthHeader(),\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n//   }\r\n// };\r\n\r\n\r\n import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// Add authentication token if needed\r\nconst getAuthHeader = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\nexport const addProduct = async (productData) => {\r\n  console.log('Adding product with data:', productData);\r\n  try {\r\n    const response = await fetch(API_BASE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(productData),\r\n      credentials: 'include', // Send session cookie (JSESSIONID)\r\n    });\r\n\r\n    console.log('Response status:', response.status);\r\n    const responseText = await response.text();\r\n    console.log('Response body:', responseText);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${responseText}`);\r\n    }\r\n\r\n    return JSON.parse(responseText);\r\n  } catch (error) {\r\n    console.error('Error adding product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateProduct = async (productId, productData) => {\r\n  console.log('Updating product ID:', productId, 'with data:', productData);\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(productData),\r\n      credentials: 'include', // Send session cookie (JSESSIONID)\r\n    });\r\n\r\n    console.log('Response status:', response.status);\r\n    const responseText = await response.text();\r\n    console.log('Response body:', responseText);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${responseText}`);\r\n    }\r\n\r\n    return JSON.parse(responseText);\r\n  } catch (error) {\r\n    console.error('Error updating product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteProduct = async (productId) => {\r\n  console.log('Deleting product ID:', productId);\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'DELETE',\r\n      credentials: 'include', // Send session cookie (JSESSIONID)\r\n    });\r\n\r\n    console.log('Response status:', response.status);\r\n    const responseText = await response.text();\r\n    console.log('Response body:', responseText);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${responseText}`);\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAllProducts = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}?size=100`, {\r\n      credentials: 'include', // Optional, since GET is permitAll()\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching products:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n// Method to count products in a specific category\r\nexport const countProductsByCategory = async (categoryId) => {\r\n   try {\r\n     const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n     headers: getAuthHeader()\r\n   });\r\n     return response.data;\r\n    } catch (error) {\r\n      console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n       if (error.response?.status === 404) {\r\n  \r\n        return 0; // Or handle the not found case as needed\r\n   }\r\n   throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n   }\r\n  };\r\n  \r\n\r\n  // Function to search products by name\r\nexport const searchProductsByName = async (name) => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/search`, {\r\n      params: { name },\r\n      headers: getAuthHeader(),\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n  }\r\n};\r\n"],"mappings":"AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGC,OAAOA,KAAK,MAAM,OAAO;;AAE1B;;AAEA;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOF,KAAK,GAAG;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;AAED,MAAMI,YAAY,GAAG,oCAAoC;AAEzD,OAAO,MAAMC,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC/CC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,WAAW,CAAC;EACrD,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACN,YAAY,EAAE;MA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","ignoreList":[]},"metadata":{},"sourceType":"module"}