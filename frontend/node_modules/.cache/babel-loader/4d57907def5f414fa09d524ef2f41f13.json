{"ast":null,"code":"// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await axios.post(API_BASE_URL, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error adding product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error updating product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\n\n//     // Log status for debugging\n//     console.log(\"Response status:\", response.status);\n\n//     // Check if response is ok (status 200-299)\n//     if (!response.ok) {\n//       // Try to get text content to see the error\n//       const textContent = await response.text();\n//       console.error(\"Error response:\", textContent);\n//       throw new Error(`HTTP error! Status: ${response.status}`);\n//     }\n\n//     // Only try to parse JSON if we got a successful response\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error);\n//     throw error;\n//   }\n// };\n\n// // Remove or fix the allProducts function since getAllProducts is better implemented\n// // If you need to keep both for backward compatibility:\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// // Add authentication token if needed\n// const getAuthHeader = () => {\n//   const token = localStorage.getItem('token');\n//   return token ? { Authorization: `Bearer ${token}` } : {};\n// };\n\n// // Function to add a new product\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await fetch('/api/products', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error adding product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to delete a product\n// export const deleteProduct = async (productId) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'DELETE',\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to update a product\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error updating product:', error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\n//       headers: getAuthHeader()\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\n//   }\n// };\n\n// // For backward compatibility\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// // Method to count products in a specific category\n// export const countProductsByCategory = async (categoryId) => {\n//    try {\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n//      headers: getAuthHeader()\n//    });\n//      return response.data;\n//     } catch (error) {\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\n//        if (error.response?.status === 404) {\n\n//         return 0; // Or handle the not found case as needed\n//    }\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\n//    }\n//   };\n\n//   // Function to search products by name\n// export const searchProductsByName = async (name) => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\n//       params: { name },\n//       headers: getAuthHeader(),\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\n//   }\n// };\n\nconst API_BASE_URL = 'http://localhost:8080/api/products';\n\n// Retrieve authentication token from localStorage\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Add a new product\nexport const addProduct = async productData => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeader() // Include authentication token\n      },\n      body: JSON.stringify(productData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding product:', error);\n    throw error;\n  }\n};\n\n// Update an existing product\nexport const updateProduct = async (productId, productData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeader() // Include authentication token\n      },\n      body: JSON.stringify(productData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error;\n  }\n};\n\n// Delete a product\nexport const deleteProduct = async productId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'DELETE',\n      headers: {\n        ...getAuthHeader() // Include authentication token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    throw error;\n  }\n};\n\n// Existing getAllProducts (already working)\nexport const getAllProducts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}?size=100`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error(\"Error fetching products:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch products');\n  }\n};\n\n// export const searchProductsByName = async (name) => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\n//       params: { name },\n//       headers: getAuthHeader(),\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\n//   }\n// };","map":{"version":3,"names":["API_BASE_URL","getAuthHeader","token","localStorage","getItem","Authorization","addProduct","productData","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","json","error","console","updateProduct","productId","deleteProduct","getAllProducts","axios","get","data","_error$response","_error$response2","_error$response2$data","message"],"sources":["C:/Users/salah/Downloads/project - Copie/src/services/productService.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await axios.post(API_BASE_URL, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    \r\n//     // Log status for debugging\r\n//     console.log(\"Response status:\", response.status);\r\n\r\n//     // Check if response is ok (status 200-299)\r\n//     if (!response.ok) {\r\n//       // Try to get text content to see the error\r\n//       const textContent = await response.text();\r\n//       console.error(\"Error response:\", textContent);\r\n//       throw new Error(`HTTP error! Status: ${response.status}`);\r\n//     }\r\n\r\n//     // Only try to parse JSON if we got a successful response\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Remove or fix the allProducts function since getAllProducts is better implemented\r\n// // If you need to keep both for backward compatibility:\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// // Add authentication token if needed\r\n// const getAuthHeader = () => {\r\n//   const token = localStorage.getItem('token');\r\n//   return token ? { Authorization: `Bearer ${token}` } : {};\r\n// };\r\n\r\n// // Function to add a new product\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await fetch('/api/products', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to delete a product\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to update a product\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\r\n//       headers: getAuthHeader()\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\r\n//   }\r\n// };\r\n\r\n// // For backward compatibility\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n\r\n\r\n// // Method to count products in a specific category\r\n// export const countProductsByCategory = async (categoryId) => {\r\n//    try {\r\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n//      headers: getAuthHeader()\r\n//    });\r\n//      return response.data;\r\n//     } catch (error) {\r\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n//        if (error.response?.status === 404) {\r\n  \r\n//         return 0; // Or handle the not found case as needed\r\n//    }\r\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n//    }\r\n//   };\r\n  \r\n\r\n//   // Function to search products by name\r\n// export const searchProductsByName = async (name) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\r\n//       params: { name },\r\n//       headers: getAuthHeader(),\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n//   }\r\n// };\r\n\r\n\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// Retrieve authentication token from localStorage\r\nconst getAuthHeader = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// Add a new product\r\nexport const addProduct = async (productData) => {\r\n  try {\r\n    const response = await fetch(API_BASE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...getAuthHeader(), // Include authentication token\r\n      },\r\n      body: JSON.stringify(productData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error adding product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing product\r\nexport const updateProduct = async (productId, productData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...getAuthHeader(), // Include authentication token\r\n      },\r\n      body: JSON.stringify(productData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a product\r\nexport const deleteProduct = async (productId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        ...getAuthHeader(), // Include authentication token\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Existing getAllProducts (already working)\r\nexport const getAllProducts = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}?size=100`, {\r\n      headers: getAuthHeader(),\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch products');\r\n  }\r\n};\r\n\r\n// export const searchProductsByName = async (name) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\r\n//       params: { name },\r\n//       headers: getAuthHeader(),\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n//   }\r\n// };"],"mappings":"AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,MAAMA,YAAY,GAAG,oCAAoC;;AAEzD;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOF,KAAK,GAAG;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,YAAY,EAAE;MACzCU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGV,aAAa,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module"}