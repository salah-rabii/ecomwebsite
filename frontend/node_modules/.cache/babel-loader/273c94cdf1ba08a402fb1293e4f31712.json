{"ast":null,"code":"// // src/services/productService.js\n\n// // Function to add a new product\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await fetch('/api/products', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error adding product:', error);\n//     throw error;\n//   }\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     const response = await fetch(`http://localhost:8080/api/products/${productId}`, {\n//       method: 'DELETE',\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error);\n//     throw error;\n//   }\n// };\n\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await fetch(`http://localhost:8080/api/products/${productId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error updating product:', error);\n//     throw error;\n//   }\n// };\n// export const allProducts = async () => {\n//   try {\n//     const response = await fetch('http://localhost:8080/api/products', {\n//       method: 'GET',\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n//     return await response.content.json();\n//   } catch (error) {\n//     console.error('Error fetching all products:', error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await fetch('http://localhost:8080/api/products');\n\n//     // Log status and response type\n//     console.log(\"Response status:\", response);\n\n//     // Check if response is ok (status 200-299)\n//     if (!response.ok) {\n//       // Try to get text content to see the error\n//       const textContent = await response.text();\n//       console.error(\"Error response:\", textContent);\n//       throw new Error(`HTTP error! Status: ${response.status\n// }`);\n//     }\n\n//     // Only try to parse JSON if we got a successful response\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error);\n//     throw error;\n//   }\n// };\n\n// src/services/productService.js\n\n// Choose one approach - using relative URLs for consistency\nconst API_BASE_URL = 'http://localhost:8080/api/products';\n\n// Function to add a new product\n// Example of enhanced error logging\nexport const addProduct = async productData => {\n  try {\n    console.log('Sending product data:', productData);\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData)\n    });\n    console.log('Response status:', response.status);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Server error response:', errorText);\n      throw new Error(`Error ${response.status}: ${response.statusText}. Details: ${errorText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding product:', error);\n    throw error;\n  }\n};\nexport const deleteProduct = async productId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    throw error;\n  }\n};\nexport const updateProduct = async (productId, productData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error;\n  }\n};\nexport const getAllProducts = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}?size=100`);\n\n    // Log status for debugging\n    console.log(\"Response status:\", response.status);\n\n    // Check if response is ok (status 200-299)\n    if (!response.ok) {\n      // Try to get text content to see the error\n      const textContent = await response.text();\n      console.error(\"Error response:\", textContent);\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    // Only try to parse JSON if we got a successful response\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    throw error;\n  }\n};\n\n// Remove or fix the allProducts function since getAllProducts is better implemented\n// If you need to keep both for backward compatibility:\nexport const allProducts = async () => {\n  return getAllProducts();\n};","map":{"version":3,"names":["API_BASE_URL","addProduct","productData","console","log","response","fetch","method","headers","body","JSON","stringify","status","ok","errorText","text","error","Error","statusText","json","deleteProduct","productId","updateProduct","getAllProducts","textContent","allProducts"],"sources":["C:/Users/salah/Downloads/project - Copie/src/services/productService.js"],"sourcesContent":["// // src/services/productService.js\r\n\r\n// // Function to add a new product\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await fetch('/api/products', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     const response = await fetch(`http://localhost:8080/api/products/${productId}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await fetch(`http://localhost:8080/api/products/${productId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n// export const allProducts = async () => {\r\n//   try {\r\n//     const response = await fetch('http://localhost:8080/api/products', {\r\n//       method: 'GET',\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n//     return await response.content.json();\r\n//   } catch (error) {\r\n//     console.error('Error fetching all products:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await fetch('http://localhost:8080/api/products');\r\n\r\n//     // Log status and response type\r\n//     console.log(\"Response status:\", response);\r\n\r\n//     // Check if response is ok (status 200-299)\r\n//     if (!response.ok) {\r\n//       // Try to get text content to see the error\r\n//       const textContent = await response.text();\r\n//       console.error(\"Error response:\", textContent);\r\n//       throw new Error(`HTTP error! Status: ${response.status\r\n// }`);\r\n//     }\r\n\r\n//     // Only try to parse JSON if we got a successful response\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n\r\n\r\n// src/services/productService.js\r\n\r\n// Choose one approach - using relative URLs for consistency\r\nconst API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// Function to add a new product\r\n// Example of enhanced error logging\r\nexport const addProduct = async (productData) => {\r\n  try {\r\n    console.log('Sending product data:', productData);\r\n    const response = await fetch(API_BASE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(productData)\r\n    });\r\n\r\n    console.log('Response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('Server error response:', errorText);\r\n      throw new Error(`Error ${response.status}: ${response.statusText}. Details: ${errorText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error adding product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteProduct = async (productId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateProduct = async (productId, productData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(productData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAllProducts = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    \r\n    // Log status for debugging\r\n    console.log(\"Response status:\", response.status);\r\n\r\n    // Check if response is ok (status 200-299)\r\n    if (!response.ok) {\r\n      // Try to get text content to see the error\r\n      const textContent = await response.text();\r\n      console.error(\"Error response:\", textContent);\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    // Only try to parse JSON if we got a successful response\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Remove or fix the allProducts function since getAllProducts is better implemented\r\n// If you need to keep both for backward compatibility:\r\nexport const allProducts = async () => {\r\n  return getAllProducts();\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}