{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salah\\\\Downloads\\\\project - Copie\\\\src\\\\components\\\\Dashboard\\\\dashboard.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Logout from '../Autentification/logout';\nimport AuthService from '../Autentification/authservice';\nimport axios from 'axios';\nimport AdminDashboard from './admindashboard';\nimport './style.css';\nconst Dashboard = () => {\n  const navigate = useNavigate();\n  const [dashboardData, setDashboardData] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Vérifier si l'utilisateur est connecté\n    if (!AuthService.checkAuthStatus()) {\n      navigate('/signin', {\n        replace: true\n      });\n      return;\n    }\n\n    // Déterminer quelle API appeler en fonction du rôle\n    const dashboardUrl = AuthService.isAdmin() ? 'http://localhost:8080/api/admin/dashboard' // API Admin\n    : 'http://localhost:8080/api/dashboard'; // API utilisateur standard\n\n    // Charger les données du tableau de bord approprié\n    const fetchDashboard = async () => {\n      try {\n        const response = await axios.get(dashboardUrl, {\n          withCredentials: true\n        });\n        setDashboardData(response.data);\n        setError(null);\n      } catch (error) {\n        console.error(\"Erreur lors du chargement du tableau de bord:\", error);\n        setError(\"Impossible de charger les données du tableau de bord\");\n\n        // Si erreur 401 ou 403, rediriger vers login\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n          AuthService.logout();\n          navigate('/signin', {\n            replace: true\n          });\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDashboard();\n  }, [navigate]);\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    }, \"Chargement...\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, AuthService.isAdmin() ? /*#__PURE__*/React.createElement(AdminDashboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Logout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  })));\n};\nexport default Dashboard;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Logout","AuthService","axios","AdminDashboard","Dashboard","navigate","dashboardData","setDashboardData","loading","setLoading","error","setError","checkAuthStatus","replace","dashboardUrl","isAdmin","fetchDashboard","response","get","withCredentials","data","console","status","logout","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment"],"sources":["C:/Users/salah/Downloads/project - Copie/src/components/Dashboard/dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Logout from '../Autentification/logout';\r\nimport AuthService from '../Autentification/authservice';\r\nimport axios from 'axios';\r\nimport AdminDashboard from './admindashboard';\r\nimport './style.css';\r\n\r\nconst Dashboard = () => {\r\n  const navigate = useNavigate();\r\n  const [dashboardData, setDashboardData] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Vérifier si l'utilisateur est connecté\r\n    if (!AuthService.checkAuthStatus()) {\r\n      navigate('/signin', { replace: true });\r\n      return;\r\n    }\r\n\r\n    // Déterminer quelle API appeler en fonction du rôle\r\n    const dashboardUrl = AuthService.isAdmin() \r\n      ? 'http://localhost:8080/api/admin/dashboard'  // API Admin\r\n      : 'http://localhost:8080/api/dashboard';       // API utilisateur standard\r\n\r\n    // Charger les données du tableau de bord approprié\r\n    const fetchDashboard = async () => {\r\n      try {\r\n        const response = await axios.get(dashboardUrl, {\r\n          withCredentials: true\r\n        });\r\n        setDashboardData(response.data);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors du chargement du tableau de bord:\", error);\r\n        setError(\"Impossible de charger les données du tableau de bord\");\r\n        \r\n        // Si erreur 401 ou 403, rediriger vers login\r\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n          AuthService.logout();\r\n          navigate('/signin', { replace: true });\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDashboard();\r\n  }, [navigate]);\r\n\r\n  if (loading) {\r\n    return <div >Chargement...</div>;\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      \r\n      \r\n      {AuthService.isAdmin() ? (\r\n        <AdminDashboard />\r\n      ) : (\r\n        <>\r\n          \r\n          <Logout />\r\n        </>\r\n      )}\r\n\r\n      \r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}