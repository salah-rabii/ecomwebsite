{"ast":null,"code":"// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await axios.post(API_BASE_URL, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error adding product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error updating product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\n\n//     // Log status for debugging\n//     console.log(\"Response status:\", response.status);\n\n//     // Check if response is ok (status 200-299)\n//     if (!response.ok) {\n//       // Try to get text content to see the error\n//       const textContent = await response.text();\n//       console.error(\"Error response:\", textContent);\n//       throw new Error(`HTTP error! Status: ${response.status}`);\n//     }\n\n//     // Only try to parse JSON if we got a successful response\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error);\n//     throw error;\n//   }\n// };\n\n// // Remove or fix the allProducts function since getAllProducts is better implemented\n// // If you need to keep both for backward compatibility:\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// // Add authentication token if needed\n// const getAuthHeader = () => {\n//   const token = localStorage.getItem('token');\n//   return token ? { Authorization: `Bearer ${token}` } : {};\n// };\n\n// // Function to add a new product\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await fetch('/api/products', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error adding product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to delete a product\n// export const deleteProduct = async (productId) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'DELETE',\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to update a product\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error updating product:', error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\n//       headers: getAuthHeader()\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\n//   }\n// };\n\n// // For backward compatibility\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// // Method to count products in a specific category\n// export const countProductsByCategory = async (categoryId) => {\n//    try {\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n//      headers: getAuthHeader()\n//    });\n//      return response.data;\n//     } catch (error) {\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\n//        if (error.response?.status === 404) {\n\n//         return 0; // Or handle the not found case as needed\n//    }\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\n//    }\n//   };\n\n//   // Function to search products by name\n// export const searchProductsByName = async (name) => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\n//       params: { name },\n//       headers: getAuthHeader(),\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\n//   }\n// };\n\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api/products';\n\n// Default credentials\nconst DEFAULT_USERNAME = 'salah@admin.com';\nconst DEFAULT_PASSWORD = 'salahsalah';\n\n// Function to get JWT token header\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Function to create Basic Auth header\nconst getBasicAuthHeader = (username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\n  const credentials = btoa(`${username}:${password}`); // Base64 encode username:password\n  return {\n    Authorization: `Basic ${credentials}`\n  };\n};\n\n// Helper function to handle fetch responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    // Try to get error details from response\n    let errorDetail = '';\n    try {\n      const errorData = await response.json();\n      errorDetail = JSON.stringify(errorData);\n    } catch (e) {\n      errorDetail = response.statusText;\n    }\n    throw new Error(`Server error ${response.status}: ${errorDetail}`);\n  }\n  return response.json();\n};\n\n// Add a new product\nexport const addProduct = async (productData, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\n  try {\n    console.log('Adding product with auth:', username); // Debug info\n    console.log('API URL:', API_BASE_URL); // Debug info\n\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getBasicAuthHeader(username, password)\n      },\n      body: JSON.stringify(productData),\n      // Add these options to help with CORS issues\n      mode: 'cors',\n      credentials: 'include'\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error adding product:', error);\n    // Check if it's a network error\n    if (error.message === 'Failed to fetch') {\n      console.error('Network error - Check if server is running at', API_BASE_URL);\n    }\n    throw error;\n  }\n};\n\n// Update an existing product\nexport const updateProduct = async (productId, productData, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\n  try {\n    console.log(`Updating product ${productId} with auth:`, username); // Debug info\n\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getBasicAuthHeader(username, password)\n      },\n      body: JSON.stringify(productData),\n      mode: 'cors',\n      credentials: 'include'\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error updating product:', error);\n    if (error.message === 'Failed to fetch') {\n      console.error('Network error - Check if server is running at', API_BASE_URL);\n    }\n    throw error;\n  }\n};\n\n// Delete a product\nexport const deleteProduct = async (productId, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\n  try {\n    console.log(`Deleting product ${productId} with auth:`, username); // Debug info\n\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'DELETE',\n      headers: {\n        ...getBasicAuthHeader(username, password)\n      },\n      mode: 'cors',\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      // For DELETE, we handle it slightly differently as it might not return JSON\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    if (error.message === 'Failed to fetch') {\n      console.error('Network error - Check if server is running at', API_BASE_URL);\n    }\n    throw error;\n  }\n};\n\n// Get all products (no auth required for GET)\nexport const getAllProducts = async () => {\n  try {\n    console.log('Fetching all products'); // Debug info\n\n    const response = await fetch(`${API_BASE_URL}?size=100`, {\n      mode: 'cors',\n      credentials: 'include'\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    if (error.message === 'Failed to fetch') {\n      console.error('Network error - Check if server is running at', API_BASE_URL);\n    }\n    throw error;\n  }\n};\n\n// Method to count products in a specific category\nexport const countProductsByCategory = async categoryId => {\n  try {\n    console.log(`Counting products in category ${categoryId}`); // Debug info\n\n    const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n      headers: {\n        ...getAuthHeader(),\n        ...getBasicAuthHeader()\n      },\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3, _error$response3$data;\n    console.error(`Error counting products in category ${categoryId}:`, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    if (error.message.includes('Network Error')) {\n      console.error('Network error - Check if server is running at', API_BASE_URL);\n    }\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n      return 0;\n    }\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || `Failed to count products in category ${categoryId}`);\n  }\n};\n\n// Function to search products by name\nexport const searchProductsByName = async name => {\n  try {\n    console.log(`Searching products with name: ${name}`); // Debug info\n\n    const response = await axios.get(`${API_BASE_URL}/search`, {\n      params: {\n        name\n      },\n      headers: {\n        ...getAuthHeader(),\n        ...getBasicAuthHeader()\n      },\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response5, _error$response5$data;\n    console.error(\"Error searching products by name:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    if (error.message.includes('Network Error')) {\n      console.error('Network error - Check if server is running at', API_BASE_URL);\n    }\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to search products by name');\n  }\n};\n\n// Test connection function\nexport const testConnection = async () => {\n  try {\n    console.log('Testing connection to API server...');\n    const response = await fetch(API_BASE_URL.split('/api')[0] + '/health', {\n      method: 'GET',\n      mode: 'cors'\n    });\n    if (response.ok) {\n      console.log('Connection successful!');\n      return true;\n    } else {\n      console.error(`Server responded with status: ${response.status}`);\n      return false;\n    }\n  } catch (error) {\n    console.error('Connection test failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","DEFAULT_USERNAME","DEFAULT_PASSWORD","getAuthHeader","token","localStorage","getItem","Authorization","getBasicAuthHeader","username","password","credentials","btoa","handleResponse","response","ok","errorDetail","errorData","json","JSON","stringify","e","statusText","Error","status","addProduct","productData","console","log","fetch","method","headers","body","mode","error","message","updateProduct","productId","deleteProduct","getAllProducts","countProductsByCategory","categoryId","get","withCredentials","data","_error$response","_error$response2","_error$response3","_error$response3$data","includes","searchProductsByName","name","params","_error$response4","_error$response5","_error$response5$data","testConnection","split"],"sources":["C:/Users/salah/Downloads/project - Copie/src/services/productService.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await axios.post(API_BASE_URL, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    \r\n//     // Log status for debugging\r\n//     console.log(\"Response status:\", response.status);\r\n\r\n//     // Check if response is ok (status 200-299)\r\n//     if (!response.ok) {\r\n//       // Try to get text content to see the error\r\n//       const textContent = await response.text();\r\n//       console.error(\"Error response:\", textContent);\r\n//       throw new Error(`HTTP error! Status: ${response.status}`);\r\n//     }\r\n\r\n//     // Only try to parse JSON if we got a successful response\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Remove or fix the allProducts function since getAllProducts is better implemented\r\n// // If you need to keep both for backward compatibility:\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// // Add authentication token if needed\r\n// const getAuthHeader = () => {\r\n//   const token = localStorage.getItem('token');\r\n//   return token ? { Authorization: `Bearer ${token}` } : {};\r\n// };\r\n\r\n// // Function to add a new product\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await fetch('/api/products', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to delete a product\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to update a product\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\r\n//       headers: getAuthHeader()\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\r\n//   }\r\n// };\r\n\r\n// // For backward compatibility\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // Method to count products in a specific category\r\n// export const countProductsByCategory = async (categoryId) => {\r\n//    try {\r\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n//      headers: getAuthHeader()\r\n//    });\r\n//      return response.data;\r\n//     } catch (error) {\r\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n//        if (error.response?.status === 404) {\r\n  \r\n//         return 0; // Or handle the not found case as needed\r\n//    }\r\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n//    }\r\n//   };\r\n  \r\n\r\n//   // Function to search products by name\r\n// export const searchProductsByName = async (name) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\r\n//       params: { name },\r\n//       headers: getAuthHeader(),\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n//   }\r\n// };\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// Default credentials\r\nconst DEFAULT_USERNAME = 'salah@admin.com';\r\nconst DEFAULT_PASSWORD = 'salahsalah';\r\n\r\n// Function to get JWT token header\r\nconst getAuthHeader = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// Function to create Basic Auth header\r\nconst getBasicAuthHeader = (username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\r\n  const credentials = btoa(`${username}:${password}`); // Base64 encode username:password\r\n  return { Authorization: `Basic ${credentials}` };\r\n};\r\n\r\n// Helper function to handle fetch responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    // Try to get error details from response\r\n    let errorDetail = '';\r\n    try {\r\n      const errorData = await response.json();\r\n      errorDetail = JSON.stringify(errorData);\r\n    } catch (e) {\r\n      errorDetail = response.statusText;\r\n    }\r\n    \r\n    throw new Error(`Server error ${response.status}: ${errorDetail}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Add a new product\r\nexport const addProduct = async (productData, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\r\n  try {\r\n    console.log('Adding product with auth:', username); // Debug info\r\n    console.log('API URL:', API_BASE_URL); // Debug info\r\n    \r\n    const response = await fetch(API_BASE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...getBasicAuthHeader(username, password),\r\n      },\r\n      body: JSON.stringify(productData),\r\n      // Add these options to help with CORS issues\r\n      mode: 'cors',\r\n      credentials: 'include',\r\n    });\r\n    \r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error adding product:', error);\r\n    // Check if it's a network error\r\n    if (error.message === 'Failed to fetch') {\r\n      console.error('Network error - Check if server is running at', API_BASE_URL);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing product\r\nexport const updateProduct = async (productId, productData, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\r\n  try {\r\n    console.log(`Updating product ${productId} with auth:`, username); // Debug info\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...getBasicAuthHeader(username, password),\r\n      },\r\n      body: JSON.stringify(productData),\r\n      mode: 'cors',\r\n      credentials: 'include',\r\n    });\r\n    \r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error updating product:', error);\r\n    if (error.message === 'Failed to fetch') {\r\n      console.error('Network error - Check if server is running at', API_BASE_URL);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a product\r\nexport const deleteProduct = async (productId, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\r\n  try {\r\n    console.log(`Deleting product ${productId} with auth:`, username); // Debug info\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        ...getBasicAuthHeader(username, password),\r\n      },\r\n      mode: 'cors',\r\n      credentials: 'include',\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      // For DELETE, we handle it slightly differently as it might not return JSON\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n    if (error.message === 'Failed to fetch') {\r\n      console.error('Network error - Check if server is running at', API_BASE_URL);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all products (no auth required for GET)\r\nexport const getAllProducts = async () => {\r\n  try {\r\n    console.log('Fetching all products'); // Debug info\r\n    \r\n    const response = await fetch(`${API_BASE_URL}?size=100`, {\r\n      mode: 'cors',\r\n      credentials: 'include',\r\n    });\r\n    \r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    if (error.message === 'Failed to fetch') {\r\n      console.error('Network error - Check if server is running at', API_BASE_URL);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Method to count products in a specific category\r\nexport const countProductsByCategory = async (categoryId) => {\r\n  try {\r\n    console.log(`Counting products in category ${categoryId}`); // Debug info\r\n    \r\n    const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n      headers: { ...getAuthHeader(), ...getBasicAuthHeader() },\r\n      withCredentials: true,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n    if (error.message.includes('Network Error')) {\r\n      console.error('Network error - Check if server is running at', API_BASE_URL);\r\n    }\r\n    if (error.response?.status === 404) {\r\n      return 0;\r\n    }\r\n    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n  }\r\n};\r\n\r\n// Function to search products by name\r\nexport const searchProductsByName = async (name) => {\r\n  try {\r\n    console.log(`Searching products with name: ${name}`); // Debug info\r\n    \r\n    const response = await axios.get(`${API_BASE_URL}/search`, {\r\n      params: { name },\r\n      headers: { ...getAuthHeader(), ...getBasicAuthHeader() },\r\n      withCredentials: true,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n    if (error.message.includes('Network Error')) {\r\n      console.error('Network error - Check if server is running at', API_BASE_URL);\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n  }\r\n};\r\n\r\n// Test connection function\r\nexport const testConnection = async () => {\r\n  try {\r\n    console.log('Testing connection to API server...');\r\n    const response = await fetch(API_BASE_URL.split('/api')[0] + '/health', {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n    });\r\n    \r\n    if (response.ok) {\r\n      console.log('Connection successful!');\r\n      return true;\r\n    } else {\r\n      console.error(`Server responded with status: ${response.status}`);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('Connection test failed:', error);\r\n    return false;\r\n  }\r\n};"],"mappings":"AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,oCAAoC;;AAEzD;AACA,MAAMC,gBAAgB,GAAG,iBAAiB;AAC1C,MAAMC,gBAAgB,GAAG,YAAY;;AAErC;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOF,KAAK,GAAG;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA,MAAMI,kBAAkB,GAAGA,CAACC,QAAQ,GAAGR,gBAAgB,EAAES,QAAQ,GAAGR,gBAAgB,KAAK;EACvF,MAAMS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","ignoreList":[]},"metadata":{},"sourceType":"module"}