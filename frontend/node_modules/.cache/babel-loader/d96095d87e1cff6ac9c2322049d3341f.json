{"ast":null,"code":"// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await axios.post(API_BASE_URL, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error adding product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error updating product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\n\n//     // Log status for debugging\n//     console.log(\"Response status:\", response.status);\n\n//     // Check if response is ok (status 200-299)\n//     if (!response.ok) {\n//       // Try to get text content to see the error\n//       const textContent = await response.text();\n//       console.error(\"Error response:\", textContent);\n//       throw new Error(`HTTP error! Status: ${response.status}`);\n//     }\n\n//     // Only try to parse JSON if we got a successful response\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error);\n//     throw error;\n//   }\n// };\n\n// // Remove or fix the allProducts function since getAllProducts is better implemented\n// // If you need to keep both for backward compatibility:\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api/products';\n\n// Add authentication token if needed\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Function to add a new product\nexport const addProduct = async productData => {\n  try {\n    const response = await fetch('/api/products', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding product:', error);\n    throw error;\n  }\n};\n\n// Function to delete a product\nexport const deleteProduct = async productId => {\n  try {\n    const response = await fetch(`/api/products/${productId}`, {\n      method: 'DELETE'\n    });\n    console.log(response);\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return true;\n  } catch (error) {\n    console.error(error);\n    console.error('Error deleting product:', error);\n    throw error;\n  }\n};\n\n// Function to update a product\nexport const updateProduct = async (productId, productData) => {\n  try {\n    const response = await fetch(`/api/products/${productId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error;\n  }\n};\nexport const getAllProducts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}?size=100`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error(\"Error fetching products:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch products');\n  }\n};\n\n// For backward compatibility\nexport const allProducts = async () => {\n  return getAllProducts();\n};\n\n// Method to count products in a specific category\nexport const countProductsByCategory = async categoryId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response5, _error$response5$data;\n    console.error(`Error counting products in category ${categoryId}:`, ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 404) {\n      return 0; // Or handle the not found case as needed\n    }\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || `Failed to count products in category ${categoryId}`);\n  }\n};\n\n// Function to search products by name\nexport const searchProductsByName = async name => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/search`, {\n      params: {\n        name\n      },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response7, _error$response7$data;\n    console.error(\"Error searching products by name:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to search products by name');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","getAuthHeader","token","localStorage","getItem","Authorization","addProduct","productData","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","json","error","console","deleteProduct","productId","log","updateProduct","getAllProducts","get","data","_error$response","_error$response2","_error$response2$data","message","allProducts","countProductsByCategory","categoryId","_error$response3","_error$response4","_error$response5","_error$response5$data","searchProductsByName","name","params","_error$response6","_error$response7","_error$response7$data"],"sources":["C:/Users/salah/Downloads/project - Copie/src/services/productService.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await axios.post(API_BASE_URL, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    \r\n//     // Log status for debugging\r\n//     console.log(\"Response status:\", response.status);\r\n\r\n//     // Check if response is ok (status 200-299)\r\n//     if (!response.ok) {\r\n//       // Try to get text content to see the error\r\n//       const textContent = await response.text();\r\n//       console.error(\"Error response:\", textContent);\r\n//       throw new Error(`HTTP error! Status: ${response.status}`);\r\n//     }\r\n\r\n//     // Only try to parse JSON if we got a successful response\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Remove or fix the allProducts function since getAllProducts is better implemented\r\n// // If you need to keep both for backward compatibility:\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// Add authentication token if needed\r\nconst getAuthHeader = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// Function to add a new product\r\nexport const addProduct = async (productData) => {\r\n  try {\r\n    const response = await fetch('/api/products', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(productData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error adding product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to delete a product\r\nexport const deleteProduct = async (productId) => {\r\n  try {\r\n    const response = await fetch(`/api/products/${productId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    console.log(response);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    console.error('Error deleting product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to update a product\r\nexport const updateProduct = async (productId, productData) => {\r\n  try {\r\n    const response = await fetch(`/api/products/${productId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(productData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAllProducts = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}?size=100`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch products');\r\n  }\r\n};\r\n\r\n// For backward compatibility\r\nexport const allProducts = async () => {\r\n  return getAllProducts();\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Method to count products in a specific category\r\nexport const countProductsByCategory = async (categoryId) => {\r\n   try {\r\n     const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n     headers: getAuthHeader()\r\n   });\r\n     return response.data;\r\n    } catch (error) {\r\n      console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n       if (error.response?.status === 404) {\r\n  \r\n        return 0; // Or handle the not found case as needed\r\n   }\r\n   throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n   }\r\n  };\r\n  \r\n\r\n  // Function to search products by name\r\nexport const searchProductsByName = async (name) => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/search`, {\r\n      params: { name },\r\n      headers: getAuthHeader(),\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}