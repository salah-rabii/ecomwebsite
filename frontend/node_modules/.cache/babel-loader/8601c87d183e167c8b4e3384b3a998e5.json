{"ast":null,"code":"// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await axios.post(API_BASE_URL, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error adding product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error updating product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\n\n//     // Log status for debugging\n//     console.log(\"Response status:\", response.status);\n\n//     // Check if response is ok (status 200-299)\n//     if (!response.ok) {\n//       // Try to get text content to see the error\n//       const textContent = await response.text();\n//       console.error(\"Error response:\", textContent);\n//       throw new Error(`HTTP error! Status: ${response.status}`);\n//     }\n\n//     // Only try to parse JSON if we got a successful response\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error);\n//     throw error;\n//   }\n// };\n\n// // Remove or fix the allProducts function since getAllProducts is better implemented\n// // If you need to keep both for backward compatibility:\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// // Add authentication token if needed\n// const getAuthHeader = () => {\n//   const token = localStorage.getItem('token');\n//   return token ? { Authorization: `Bearer ${token}` } : {};\n// };\n\n// // Function to add a new product\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await fetch('/api/products', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error adding product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to delete a product\n// export const deleteProduct = async (productId) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'DELETE',\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to update a product\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error updating product:', error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\n//       headers: getAuthHeader()\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\n//   }\n// };\n\n// // For backward compatibility\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// // Method to count products in a specific category\n// export const countProductsByCategory = async (categoryId) => {\n//    try {\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n//      headers: getAuthHeader()\n//    });\n//      return response.data;\n//     } catch (error) {\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\n//        if (error.response?.status === 404) {\n\n//         return 0; // Or handle the not found case as needed\n//    }\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\n//    }\n//   };\n\n//   // Function to search products by name\n// export const searchProductsByName = async (name) => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\n//       params: { name },\n//       headers: getAuthHeader(),\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\n//   }\n// };\n\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api/products';\n\n// Default credentials\nconst DEFAULT_USERNAME = 'salah@admin.com'; // Username is the email\nconst DEFAULT_PASSWORD = 'salahsalah';\n\n// Function to get JWT token header\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Function to create Basic Auth header\nconst getBasicAuthHeader = (username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\n  const credentials = btoa(`${username}:${password}`); // Base64 encode username:password\n  return {\n    Authorization: `Basic ${credentials}`\n  };\n};\n\n// Function to login and get token\nexport const login = async () => {\n  try {\n    const response = await axios.post('http://localhost:8080/api/auth/login', {\n      email: DEFAULT_USERNAME,\n      // Using email as username\n      password: DEFAULT_PASSWORD\n    });\n    if (response.data && response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      return response.data;\n    } else {\n      throw new Error('No token received');\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// Add a new product\nexport const addProduct = async (productData, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getBasicAuthHeader(username, password)\n      },\n      body: JSON.stringify(productData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding product:', error);\n    throw error;\n  }\n};\n\n// Update an existing product\nexport const updateProduct = async (productId, productData, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getBasicAuthHeader(username, password)\n      },\n      body: JSON.stringify(productData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error;\n  }\n};\n\n// Delete a product\nexport const deleteProduct = async (productId, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\n      method: 'DELETE',\n      headers: {\n        ...getBasicAuthHeader(username, password)\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    throw error;\n  }\n};\n\n// Get all products (no auth required for GET)\nexport const getAllProducts = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}?size=100`);\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    throw error;\n  }\n};\n\n// Method to count products in a specific category\nexport const countProductsByCategory = async categoryId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n      headers: {\n        ...getAuthHeader(),\n        ...getBasicAuthHeader()\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3, _error$response3$data;\n    console.error(`Error counting products in category ${categoryId}:`, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n      return 0; // Or handle the not found case as needed\n    }\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || `Failed to count products in category ${categoryId}`);\n  }\n};\n\n// Function to search products by name\nexport const searchProductsByName = async name => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/search`, {\n      params: {\n        name\n      },\n      headers: {\n        ...getAuthHeader(),\n        ...getBasicAuthHeader()\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response5, _error$response5$data;\n    console.error(\"Error searching products by name:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to search products by name');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","DEFAULT_USERNAME","DEFAULT_PASSWORD","getAuthHeader","token","localStorage","getItem","Authorization","getBasicAuthHeader","username","password","credentials","btoa","login","response","post","email","data","setItem","Error","error","console","addProduct","productData","fetch","method","headers","body","JSON","stringify","ok","status","statusText","json","updateProduct","productId","deleteProduct","getAllProducts","countProductsByCategory","categoryId","get","_error$response","_error$response2","_error$response3","_error$response3$data","message","searchProductsByName","name","params","_error$response4","_error$response5","_error$response5$data"],"sources":["C:/Users/salah/Downloads/project - Copie/src/services/productService.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await axios.post(API_BASE_URL, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    \r\n//     // Log status for debugging\r\n//     console.log(\"Response status:\", response.status);\r\n\r\n//     // Check if response is ok (status 200-299)\r\n//     if (!response.ok) {\r\n//       // Try to get text content to see the error\r\n//       const textContent = await response.text();\r\n//       console.error(\"Error response:\", textContent);\r\n//       throw new Error(`HTTP error! Status: ${response.status}`);\r\n//     }\r\n\r\n//     // Only try to parse JSON if we got a successful response\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Remove or fix the allProducts function since getAllProducts is better implemented\r\n// // If you need to keep both for backward compatibility:\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// // Add authentication token if needed\r\n// const getAuthHeader = () => {\r\n//   const token = localStorage.getItem('token');\r\n//   return token ? { Authorization: `Bearer ${token}` } : {};\r\n// };\r\n\r\n// // Function to add a new product\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await fetch('/api/products', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to delete a product\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to update a product\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\r\n//       headers: getAuthHeader()\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\r\n//   }\r\n// };\r\n\r\n// // For backward compatibility\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // Method to count products in a specific category\r\n// export const countProductsByCategory = async (categoryId) => {\r\n//    try {\r\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n//      headers: getAuthHeader()\r\n//    });\r\n//      return response.data;\r\n//     } catch (error) {\r\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n//        if (error.response?.status === 404) {\r\n  \r\n//         return 0; // Or handle the not found case as needed\r\n//    }\r\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n//    }\r\n//   };\r\n  \r\n\r\n//   // Function to search products by name\r\n// export const searchProductsByName = async (name) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}/search`, {\r\n//       params: { name },\r\n//       headers: getAuthHeader(),\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n//   }\r\n// };\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// Default credentials\r\nconst DEFAULT_USERNAME = 'salah@admin.com'; // Username is the email\r\nconst DEFAULT_PASSWORD = 'salahsalah';\r\n\r\n// Function to get JWT token header\r\nconst getAuthHeader = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// Function to create Basic Auth header\r\nconst getBasicAuthHeader = (username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\r\n  const credentials = btoa(`${username}:${password}`); // Base64 encode username:password\r\n  return { Authorization: `Basic ${credentials}` };\r\n};\r\n\r\n// Function to login and get token\r\nexport const login = async () => {\r\n  try {\r\n    const response = await axios.post('http://localhost:8080/api/auth/login', {\r\n      email: DEFAULT_USERNAME, // Using email as username\r\n      password: DEFAULT_PASSWORD\r\n    });\r\n    \r\n    if (response.data && response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      return response.data;\r\n    } else {\r\n      throw new Error('No token received');\r\n    }\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add a new product\r\nexport const addProduct = async (productData, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\r\n  try {\r\n    const response = await fetch(API_BASE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...getBasicAuthHeader(username, password),\r\n      },\r\n      body: JSON.stringify(productData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error adding product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing product\r\nexport const updateProduct = async (productId, productData, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...getBasicAuthHeader(username, password),\r\n      },\r\n      body: JSON.stringify(productData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a product\r\nexport const deleteProduct = async (productId, username = DEFAULT_USERNAME, password = DEFAULT_PASSWORD) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${productId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        ...getBasicAuthHeader(username, password),\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all products (no auth required for GET)\r\nexport const getAllProducts = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Method to count products in a specific category\r\nexport const countProductsByCategory = async (categoryId) => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n      headers: { ...getAuthHeader(), ...getBasicAuthHeader() }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n    if (error.response?.status === 404) {\r\n      return 0; // Or handle the not found case as needed\r\n    }\r\n    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n  }\r\n};\r\n\r\n// Function to search products by name\r\nexport const searchProductsByName = async (name) => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/search`, {\r\n      params: { name },\r\n      headers: { ...getAuthHeader(), ...getBasicAuthHeader() }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n  }\r\n};"],"mappings":"AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,oCAAoC;;AAEzD;AACA,MAAMC,gBAAgB,GAAG,iBAAiB,CAAC,CAAC;AAC5C,MAAMC,gBAAgB,GAAG,YAAY;;AAErC;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOF,KAAK,GAAG;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA,MAAMI,kBAAkB,GAAGA,CAACC,QAAQ,GAAGR,gBAAgB,EAAES,QAAQ,GAAGR,gBAAgB,KAAK;E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","ignoreList":[]},"metadata":{},"sourceType":"module"}