{"ast":null,"code":"// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await axios.post(API_BASE_URL, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error adding product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error updating product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\n\n//     // Log status for debugging\n//     console.log(\"Response status:\", response.status);\n\n//     // Check if response is ok (status 200-299)\n//     if (!response.ok) {\n//       // Try to get text content to see the error\n//       const textContent = await response.text();\n//       console.error(\"Error response:\", textContent);\n//       throw new Error(`HTTP error! Status: ${response.status}`);\n//     }\n\n//     // Only try to parse JSON if we got a successful response\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error);\n//     throw error;\n//   }\n// };\n\n// // Remove or fix the allProducts function since getAllProducts is better implemented\n// // If you need to keep both for backward compatibility:\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api/products';\n\n// Add authentication token if needed\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// // Function to add a new product\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await fetch('/api/products', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error adding product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to delete a product\n// export const deleteProduct = async (productId) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'DELETE',\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error);\n//     throw error;\n//   }\n// };\n\n// // Function to update a product\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await fetch(`/api/products/${productId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(productData)\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error('Error updating product:', error);\n//     throw error;\n//   }\n// };\n\n// Add\nexport const addProduct = async productData => {\n  const response = await axios.post('/api/products', productData);\n  return response.data;\n};\n\n// Edit\nexport const updateProduct = async (productId, updatedData) => {\n  const response = await axios.put(`/api/products/${productId}`, updatedData);\n  return response.data;\n};\n\n// Delete\nexport const deleteProduct = async productId => {\n  const response = await axios.delete(`/api/products/${productId}`);\n  return response.data;\n};\nexport const getAllProducts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}?size=100`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error(\"Error fetching products:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch products');\n  }\n};\n\n// For backward compatibility\nexport const allProducts = async () => {\n  return getAllProducts();\n};\n\n// Method to count products in a specific category\nexport const countProductsByCategory = async categoryId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response5, _error$response5$data;\n    console.error(`Error counting products in category ${categoryId}:`, ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 404) {\n      return 0; // Or handle the not found case as needed\n    }\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || `Failed to count products in category ${categoryId}`);\n  }\n};\n\n// Function to search products by name\nexport const searchProductsByName = async name => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/search`, {\n      params: {\n        name\n      },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response7, _error$response7$data;\n    console.error(\"Error searching products by name:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to search products by name');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","getAuthHeader","token","localStorage","getItem","Authorization","addProduct","productData","response","post","data","updateProduct","productId","updatedData","put","deleteProduct","delete","getAllProducts","get","headers","error","_error$response","_error$response2","_error$response2$data","console","message","Error","allProducts","countProductsByCategory","categoryId","_error$response3","_error$response4","_error$response5","_error$response5$data","status","searchProductsByName","name","params","_error$response6","_error$response7","_error$response7$data"],"sources":["C:/Users/salah/Downloads/project - Copie/src/services/productService.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await axios.post(API_BASE_URL, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    \r\n//     // Log status for debugging\r\n//     console.log(\"Response status:\", response.status);\r\n\r\n//     // Check if response is ok (status 200-299)\r\n//     if (!response.ok) {\r\n//       // Try to get text content to see the error\r\n//       const textContent = await response.text();\r\n//       console.error(\"Error response:\", textContent);\r\n//       throw new Error(`HTTP error! Status: ${response.status}`);\r\n//     }\r\n\r\n//     // Only try to parse JSON if we got a successful response\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Remove or fix the allProducts function since getAllProducts is better implemented\r\n// // If you need to keep both for backward compatibility:\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// Add authentication token if needed\r\nconst getAuthHeader = () => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// // Function to add a new product\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await fetch('/api/products', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to delete a product\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Function to update a product\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await fetch(`/api/products/${productId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(productData)\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n\r\n\r\n// Add\r\nexport const addProduct = async (productData) => {\r\n  const response = await axios.post('/api/products', productData);\r\n  return response.data;\r\n};\r\n\r\n// Edit\r\nexport const updateProduct = async (productId, updatedData) => {\r\n  const response = await axios.put(`/api/products/${productId}`, updatedData);\r\n  return response.data;\r\n};\r\n\r\n// Delete\r\nexport const deleteProduct = async (productId) => {\r\n  const response = await axios.delete(`/api/products/${productId}`);\r\n  return response.data;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getAllProducts = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}?size=100`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch products');\r\n  }\r\n};\r\n\r\n// For backward compatibility\r\nexport const allProducts = async () => {\r\n  return getAllProducts();\r\n};\r\n\r\n\r\n\r\n\r\n// Method to count products in a specific category\r\nexport const countProductsByCategory = async (categoryId) => {\r\n   try {\r\n     const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n     headers: getAuthHeader()\r\n   });\r\n     return response.data;\r\n    } catch (error) {\r\n      console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n       if (error.response?.status === 404) {\r\n  \r\n        return 0; // Or handle the not found case as needed\r\n   }\r\n   throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n   }\r\n  };\r\n  \r\n\r\n  // Function to search products by name\r\nexport const searchProductsByName = async (name) => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/search`, {\r\n      params: { name },\r\n      headers: getAuthHeader(),\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error searching products by name:\", error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to search products by name');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}