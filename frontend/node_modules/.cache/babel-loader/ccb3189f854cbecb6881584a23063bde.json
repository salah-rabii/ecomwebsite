{"ast":null,"code":"import axios from 'axios';\nconst AuthService = {\n  // Dans AuthService.jsx, modifiez la fonction login :\n  login: async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:8080/api/account/login', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n\n      // Stocker une indication que l'utilisateur est connecté\n      sessionStorage.setItem('isLoggedIn', 'true');\n\n      // Stocker le rôle de l'utilisateur, en nettoyant si nécessaire\n      if (response.data && response.data.role) {\n        let role = response.data.role;\n        // Si le rôle est au format [ROLE], nettoyez-le\n        if (role.startsWith('[') && role.endsWith(']')) {\n          role = role.substring(1, role.length - 1);\n        }\n        sessionStorage.setItem('userRole', role);\n        console.log(\"Rôle stocké:\", role); // Pour débogage\n      }\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  logout: async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/account/logout', {\n        withCredentials: true\n      });\n\n      // Supprimer les informations de session\n      sessionStorage.removeItem('isLoggedIn');\n      sessionStorage.removeItem('userRole');\n      return response.data;\n    } catch (error) {\n      // Même en cas d'erreur, on supprime les indications locales\n      sessionStorage.removeItem('isLoggedIn');\n      sessionStorage.removeItem('userRole');\n      throw error;\n    }\n  },\n  checkAuthStatus: () => {\n    return sessionStorage.getItem('isLoggedIn') === 'true';\n  },\n  getUserRole: () => {\n    return sessionStorage.getItem('userRole') || 'USER';\n  },\n  isAdmin: () => {\n    const role = sessionStorage.getItem('userRole');\n    console.log(\"Vérification du rôle:\", role); // Pour débogage\n    return role === 'ADMIN' || role === 'ROLE_ADMIN'; // Adaptez selon votre système de rôles\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","AuthService","login","email","password","response","post","withCredentials","sessionStorage","setItem","data","role","startsWith","endsWith","substring","length","console","log","error","logout","get","removeItem","checkAuthStatus","getItem","getUserRole","isAdmin"],"sources":["C:/Users/salah/Downloads/project - Copie/src/components/Autentification/authservice.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\n\r\n\r\nconst AuthService = {\r\n  // Dans AuthService.jsx, modifiez la fonction login :\r\nlogin: async (email, password) => {\r\n  try {\r\n    const response = await axios.post(\r\n      'http://localhost:8080/api/account/login', \r\n      { email, password },\r\n      { withCredentials: true }\r\n    );\r\n    \r\n    // Stocker une indication que l'utilisateur est connecté\r\n    sessionStorage.setItem('isLoggedIn', 'true');\r\n    \r\n    // Stocker le rôle de l'utilisateur, en nettoyant si nécessaire\r\n    if (response.data && response.data.role) {\r\n      let role = response.data.role;\r\n      // Si le rôle est au format [ROLE], nettoyez-le\r\n      if (role.startsWith('[') && role.endsWith(']')) {\r\n        role = role.substring(1, role.length - 1);\r\n      }\r\n      sessionStorage.setItem('userRole', role);\r\n      console.log(\"Rôle stocké:\", role); // Pour débogage\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n},\r\n  \r\n  logout: async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/account/logout', {\r\n        withCredentials: true\r\n      });\r\n      \r\n      // Supprimer les informations de session\r\n      sessionStorage.removeItem('isLoggedIn');\r\n      sessionStorage.removeItem('userRole');\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      // Même en cas d'erreur, on supprime les indications locales\r\n      sessionStorage.removeItem('isLoggedIn');\r\n      sessionStorage.removeItem('userRole');\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  checkAuthStatus: () => {\r\n    return sessionStorage.getItem('isLoggedIn') === 'true';\r\n  },\r\n  \r\n  getUserRole: () => {\r\n    return sessionStorage.getItem('userRole') || 'USER';\r\n  },\r\n  \r\n  isAdmin: () => {\r\n    const role = sessionStorage.getItem('userRole');\r\n    console.log(\"Vérification du rôle:\", role); // Pour débogage\r\n    return role === 'ADMIN' || role === 'ROLE_ADMIN'; // Adaptez selon votre système de rôles\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,MAAMC,WAAW,GAAG;EAClB;EACFC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAC/B,yCAAyC,EACzC;QAAEH,KAAK;QAAEC;MAAS,CAAC,EACnB;QAAEG,eAAe,EAAE;MAAK,CAC1B,CAAC;;MAED;MACAC,cAAc,CAACC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;;MAE5C;MACA,IAAIJ,QAAQ,CAACK,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAACC,IAAI,EAAE;QACvC,IAAIA,IAAI,GAAGN,QAAQ,CAACK,IAAI,CAACC,IAAI;QAC7B;QACA,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;UAC9CF,IAAI,GAAGA,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEH,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;QAC3C;QACAP,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEE,IAAI,CAAC;QACxCK,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,IAAI,CAAC,CAAC,CAAC;MACrC;MAEA,OAAON,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAECC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAML,KAAK,CAACoB,GAAG,CAAC,0CAA0C,EAAE;QAC3Eb,eAAe,EAAE;MACnB,CAAC,CAAC;;MAEF;MACAC,cAAc,CAACa,UAAU,CAAC,YAAY,CAAC;MACvCb,cAAc,CAACa,UAAU,CAAC,UAAU,CAAC;MAErC,OAAOhB,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd;MACAV,cAAc,CAACa,UAAU,CAAC,YAAY,CAAC;MACvCb,cAAc,CAACa,UAAU,CAAC,UAAU,CAAC;MACrC,MAAMH,KAAK;IACb;EACF,CAAC;EAEDI,eAAe,EAAEA,CAAA,KAAM;IACrB,OAAOd,cAAc,CAACe,OAAO,CAAC,YAAY,CAAC,KAAK,MAAM;EACxD,CAAC;EAEDC,WAAW,EAAEA,CAAA,KAAM;IACjB,OAAOhB,cAAc,CAACe,OAAO,CAAC,UAAU,CAAC,IAAI,MAAM;EACrD,CAAC;EAEDE,OAAO,EAAEA,CAAA,KAAM;IACb,MAAMd,IAAI,GAAGH,cAAc,CAACe,OAAO,CAAC,UAAU,CAAC;IAC/CP,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEN,IAAI,CAAC,CAAC,CAAC;IAC5C,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,YAAY,CAAC,CAAC;EACpD;AACF,CAAC;AAED,eAAeV,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}