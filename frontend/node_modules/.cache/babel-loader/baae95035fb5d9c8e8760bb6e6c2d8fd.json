{"ast":null,"code":"// import axios from 'axios';\n\n// const AuthService = {\n//   login: async (email, password) => {\n//     try {\n//       const response = await axios.post(\n//         'http://localhost:8080/api/account/login', \n//         { email, password },\n//         { withCredentials: true }\n//       );\n\n//       // Stocker une indication que l'utilisateur est connecté\n//       sessionStorage.setItem('isLoggedIn', 'true');\n\n//       // Stocker le rôle de l'utilisateur, en nettoyant si nécessaire\n//       if (response.data && response.data.role) {\n//         let role = response.data.role;\n//         // Si le rôle est au format [ROLE], nettoyez-le\n//         if (role.startsWith('[') && role.endsWith(']')) {\n//           role = role.substring(1, role.length - 1);\n//         }\n//         sessionStorage.setItem('userRole', role);\n//         console.log(\"Rôle stocké:\", role); // Pour débogage\n//       }\n\n//       // Déclencher un événement pour informer les autres composants\n//       window.dispatchEvent(new CustomEvent('authStateChanged'));\n\n//       return response.data;\n//     } catch (error) {\n//       throw error;\n//     }\n//   },\n\n//   logout: async () => {\n//     try {\n//       const response = await axios.get('http://localhost:8080/api/account/logout', {\n//         withCredentials: true\n//       });\n\n//       // Supprimer les informations de session\n//       sessionStorage.removeItem('isLoggedIn');\n//       sessionStorage.removeItem('userRole');\n\n//       // Déclencher un événement pour informer les autres composants\n//       window.dispatchEvent(new CustomEvent('authStateChanged'));\n\n//       return response.data;\n//     } catch (error) {\n//       // Même en cas d'erreur, on supprime les indications locales\n//       sessionStorage.removeItem('isLoggedIn');\n//       sessionStorage.removeItem('userRole');\n\n//       // Déclencher un événement même en cas d'erreur\n//       window.dispatchEvent(new CustomEvent('authStateChanged'));\n\n//       throw error;\n//     }\n//   },\n\n//   checkAuthStatus: () => {\n//     return sessionStorage.getItem('isLoggedIn') === 'true';\n//   },\n\n//   getUserRole: () => {\n//     return sessionStorage.getItem('userRole') || 'USER';\n//   },\n\n//   isAdmin: () => {\n//     const role = sessionStorage.getItem('userRole');\n//     console.log(\"Vérification du rôle:\", role); // Pour débogage\n//     return role === 'ADMIN' || role === 'ROLE_ADMIN'; // Adaptez selon votre système de rôles\n//   }\n// };\n\n// export default AuthService;","map":{"version":3,"names":[],"sources":["C:/Users/salah/Downloads/project - Copie/src/components/Autentification/authservice.jsx"],"sourcesContent":["// import axios from 'axios';\r\n\r\n// const AuthService = {\r\n//   login: async (email, password) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         'http://localhost:8080/api/account/login', \r\n//         { email, password },\r\n//         { withCredentials: true }\r\n//       );\r\n      \r\n//       // Stocker une indication que l'utilisateur est connecté\r\n//       sessionStorage.setItem('isLoggedIn', 'true');\r\n      \r\n//       // Stocker le rôle de l'utilisateur, en nettoyant si nécessaire\r\n//       if (response.data && response.data.role) {\r\n//         let role = response.data.role;\r\n//         // Si le rôle est au format [ROLE], nettoyez-le\r\n//         if (role.startsWith('[') && role.endsWith(']')) {\r\n//           role = role.substring(1, role.length - 1);\r\n//         }\r\n//         sessionStorage.setItem('userRole', role);\r\n//         console.log(\"Rôle stocké:\", role); // Pour débogage\r\n//       }\r\n      \r\n//       // Déclencher un événement pour informer les autres composants\r\n//       window.dispatchEvent(new CustomEvent('authStateChanged'));\r\n      \r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   },\r\n  \r\n//   logout: async () => {\r\n//     try {\r\n//       const response = await axios.get('http://localhost:8080/api/account/logout', {\r\n//         withCredentials: true\r\n//       });\r\n      \r\n//       // Supprimer les informations de session\r\n//       sessionStorage.removeItem('isLoggedIn');\r\n//       sessionStorage.removeItem('userRole');\r\n      \r\n//       // Déclencher un événement pour informer les autres composants\r\n//       window.dispatchEvent(new CustomEvent('authStateChanged'));\r\n      \r\n//       return response.data;\r\n//     } catch (error) {\r\n//       // Même en cas d'erreur, on supprime les indications locales\r\n//       sessionStorage.removeItem('isLoggedIn');\r\n//       sessionStorage.removeItem('userRole');\r\n      \r\n//       // Déclencher un événement même en cas d'erreur\r\n//       window.dispatchEvent(new CustomEvent('authStateChanged'));\r\n      \r\n//       throw error;\r\n//     }\r\n//   },\r\n  \r\n//   checkAuthStatus: () => {\r\n//     return sessionStorage.getItem('isLoggedIn') === 'true';\r\n//   },\r\n  \r\n//   getUserRole: () => {\r\n//     return sessionStorage.getItem('userRole') || 'USER';\r\n//   },\r\n  \r\n//   isAdmin: () => {\r\n//     const role = sessionStorage.getItem('userRole');\r\n//     console.log(\"Vérification du rôle:\", role); // Pour débogage\r\n//     return role === 'ADMIN' || role === 'ROLE_ADMIN'; // Adaptez selon votre système de rôles\r\n//   }\r\n// };\r\n\r\n// export default AuthService;\r\n\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}