{"ast":null,"code":"// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// export const addProduct = async (productData) => {\n//   try {\n//     const response = await axios.post(API_BASE_URL, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error adding product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const updateProduct = async (productId, productData) => {\n//   try {\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error updating product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error.response || error);\n//     throw error;\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\n\n//     // Log status for debugging\n//     console.log(\"Response status:\", response.status);\n\n//     // Check if response is ok (status 200-299)\n//     if (!response.ok) {\n//       // Try to get text content to see the error\n//       const textContent = await response.text();\n//       console.error(\"Error response:\", textContent);\n//       throw new Error(`HTTP error! Status: ${response.status}`);\n//     }\n\n//     // Only try to parse JSON if we got a successful response\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error);\n//     throw error;\n//   }\n// };\n\n// // Remove or fix the allProducts function since getAllProducts is better implemented\n// // If you need to keep both for backward compatibility:\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// import axios from 'axios';\n\n// const API_BASE_URL = 'http://localhost:8080/api/products';\n\n// // Add authentication token if needed\n// const getAuthHeader = () => {\n//   const token = localStorage.getItem('token');\n//   return token ? { Authorization: `Bearer ${token}` } : {};\n// };\n\n// export const addProduct = async (productData) => {\n//   try {\n//     console.log(\"hello helllo\");\n//     const response = await axios.post(API_BASE_URL, productData, {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         ...getAuthHeader()\n//       }\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.log(error);\n//     console.error('Error adding product:', error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to add product');\n//   }\n// };\n\n// export const updateProduct = async (id, productData) => {\n//   const response = await axios.put(\n//     `http://localhost:8080/api/products/${id}`,\n//     productData,\n//     {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${localStorage.getItem('token')}`,\n//       },\n//     }\n//   );\n//   return response.data;\n// };\n\n// export const deleteProduct = async (productId) => {\n//   try {\n//     await axios.delete(`${API_BASE_URL}/${productId}`, {\n//       headers: getAuthHeader()\n//     });\n//     return true;\n//   } catch (error) {\n//     console.error('Error deleting product:', error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to delete product');\n//   }\n// };\n\n// export const getAllProducts = async () => {\n//   try {\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\n//       headers: getAuthHeader()\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\n//   }\n// };\n\n// // For backward compatibility\n// export const allProducts = async () => {\n//   return getAllProducts();\n// };\n\n// // Method to count products in a specific category\n// export const countProductsByCategory = async (categoryId) => {\n//    try {\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\n//      headers: getAuthHeader()\n//    });\n//      return response.data;\n//     } catch (error) {\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\n//        if (error.response?.status === 404) {\n\n//         return 0; // Or handle the not found case as needed\n//    }\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\n//    }\n//   };\n\nimport axios from 'axios';\n\n// Configure API URL - consider making this configurable via environment variables\nconst API_BASE_URL = 'http://localhost:8080/api/products';\n\n// Setup axios instance with common configuration\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  // 10 seconds timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for adding auth token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for common error handling\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response$data;\n  // Network errors will not have response property\n  if (!error.response) {\n    console.error('Network Error:', error.message);\n    // Check if the server is reachable\n    return Promise.reject(new Error('Network Error: Cannot connect to the server. Please ensure the backend is running.'));\n  }\n\n  // Handle specific HTTP errors\n  switch (error.response.status) {\n    case 401:\n      console.error('Authentication error:', error.response.data);\n      return Promise.reject(new Error('Authentication failed. Please log in again.'));\n    case 403:\n      console.error('Permission error:', error.response.data);\n      return Promise.reject(new Error('You do not have permission to perform this action.'));\n    case 404:\n      console.error('Resource not found:', error.response.data);\n      return Promise.reject(new Error('Resource not found. Please check the ID.'));\n    default:\n      console.error('API error:', error.response.data);\n      const errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || `Error ${error.response.status}: ${error.response.statusText}`;\n      return Promise.reject(new Error(errorMessage));\n  }\n});\n\n// Add product function\nexport const addProduct = async productData => {\n  try {\n    console.log('Adding product:', productData);\n    const response = await apiClient.post('', productData);\n    console.log('Product added successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding product:', error);\n    throw error;\n  }\n};\n\n// Update product function\nexport const updateProduct = async (id, productData) => {\n  try {\n    console.log(`Updating product ${id}:`, productData);\n    const response = await apiClient.put(`/${id}`, productData);\n    console.log('Product updated successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating product ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete product function\nexport const deleteProduct = async productId => {\n  try {\n    console.log(`Deleting product ${productId}`);\n    await apiClient.delete(`/${productId}`);\n    console.log(`Product ${productId} deleted successfully`);\n    return true;\n  } catch (error) {\n    console.error(`Error deleting product ${productId}:`, error);\n    throw error;\n  }\n};\n\n// Get all products function\nexport const getAllProducts = async () => {\n  try {\n    console.log('Fetching all products');\n    const response = await apiClient.get('?size=100');\n    console.log('Products fetched successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    throw error;\n  }\n};\n\n// For backward compatibility\nexport const allProducts = async () => {\n  return getAllProducts();\n};\n\n// Method to count products in a specific category\nexport const countProductsByCategory = async categoryId => {\n  try {\n    console.log(`Counting products in category ${categoryId}`);\n    const response = await apiClient.get(`/count-by-category/${categoryId}`);\n    console.log(`Category ${categoryId} count:`, response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(`Error counting products in category ${categoryId}:`, error);\n    // Handle 404 specifically\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n      return 0; // Return 0 for categories with no products\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response$data","console","message","Error","status","data","errorMessage","statusText","addProduct","productData","log","post","updateProduct","id","put","deleteProduct","productId","delete","getAllProducts","get","allProducts","countProductsByCategory","categoryId","_error$response"],"sources":["C:/Users/salah/Downloads/project - Copie/src/services/productService.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     const response = await axios.post(API_BASE_URL, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error adding product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateProduct = async (productId, productData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_BASE_URL}/${productId}`, productData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error updating product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     await axios.delete(`${API_BASE_URL}/${productId}`);\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error.response || error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}?size=100`);\r\n    \r\n//     // Log status for debugging\r\n//     console.log(\"Response status:\", response.status);\r\n\r\n//     // Check if response is ok (status 200-299)\r\n//     if (!response.ok) {\r\n//       // Try to get text content to see the error\r\n//       const textContent = await response.text();\r\n//       console.error(\"Error response:\", textContent);\r\n//       throw new Error(`HTTP error! Status: ${response.status}`);\r\n//     }\r\n\r\n//     // Only try to parse JSON if we got a successful response\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Remove or fix the allProducts function since getAllProducts is better implemented\r\n// // If you need to keep both for backward compatibility:\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// const API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// // Add authentication token if needed\r\n// const getAuthHeader = () => {\r\n//   const token = localStorage.getItem('token');\r\n//   return token ? { Authorization: `Bearer ${token}` } : {};\r\n// };\r\n\r\n// export const addProduct = async (productData) => {\r\n//   try {\r\n//     console.log(\"hello helllo\");\r\n//     const response = await axios.post(API_BASE_URL, productData, {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         ...getAuthHeader()\r\n//       }\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//     console.error('Error adding product:', error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to add product');\r\n//   }\r\n// };\r\n\r\n\r\n\r\n// export const updateProduct = async (id, productData) => {\r\n//   const response = await axios.put(\r\n//     `http://localhost:8080/api/products/${id}`,\r\n//     productData,\r\n//     {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//     }\r\n//   );\r\n//   return response.data;\r\n// };\r\n\r\n\r\n\r\n\r\n// export const deleteProduct = async (productId) => {\r\n//   try {\r\n//     await axios.delete(`${API_BASE_URL}/${productId}`, {\r\n//       headers: getAuthHeader()\r\n//     });\r\n//     return true;\r\n//   } catch (error) {\r\n//     console.error('Error deleting product:', error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to delete product');\r\n//   }\r\n// };\r\n\r\n// export const getAllProducts = async () => {\r\n//   try {\r\n//     const response = await axios.get(`${API_BASE_URL}?size=100`, {\r\n//       headers: getAuthHeader()\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching products:\", error.response?.data || error.message);\r\n//     throw new Error(error.response?.data?.message || 'Failed to fetch products');\r\n//   }\r\n// };\r\n\r\n// // For backward compatibility\r\n// export const allProducts = async () => {\r\n//   return getAllProducts();\r\n// };\r\n\r\n\r\n\r\n\r\n// // Method to count products in a specific category\r\n// export const countProductsByCategory = async (categoryId) => {\r\n//    try {\r\n//      const response = await axios.get(`${API_BASE_URL}/count-by-category/${categoryId}`, {\r\n//      headers: getAuthHeader()\r\n//    });\r\n//      return response.data;\r\n//     } catch (error) {\r\n//       console.error(`Error counting products in category ${categoryId}:`, error.response?.data || error.message);\r\n//        if (error.response?.status === 404) {\r\n  \r\n//         return 0; // Or handle the not found case as needed\r\n//    }\r\n//    throw new Error(error.response?.data?.message || `Failed to count products in category ${categoryId}`);\r\n//    }\r\n//   };\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Configure API URL - consider making this configurable via environment variables\r\nconst API_BASE_URL = 'http://localhost:8080/api/products';\r\n\r\n// Setup axios instance with common configuration\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000, // 10 seconds timeout\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Request interceptor for adding auth token\r\napiClient.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, error => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// Response interceptor for common error handling\r\napiClient.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    // Network errors will not have response property\r\n    if (!error.response) {\r\n      console.error('Network Error:', error.message);\r\n      // Check if the server is reachable\r\n      return Promise.reject(new Error('Network Error: Cannot connect to the server. Please ensure the backend is running.'));\r\n    }\r\n\r\n    // Handle specific HTTP errors\r\n    switch (error.response.status) {\r\n      case 401:\r\n        console.error('Authentication error:', error.response.data);\r\n        return Promise.reject(new Error('Authentication failed. Please log in again.'));\r\n      case 403:\r\n        console.error('Permission error:', error.response.data);\r\n        return Promise.reject(new Error('You do not have permission to perform this action.'));\r\n      case 404:\r\n        console.error('Resource not found:', error.response.data);\r\n        return Promise.reject(new Error('Resource not found. Please check the ID.'));\r\n      default:\r\n        console.error('API error:', error.response.data);\r\n        const errorMessage = error.response.data?.message || `Error ${error.response.status}: ${error.response.statusText}`;\r\n        return Promise.reject(new Error(errorMessage));\r\n    }\r\n  }\r\n);\r\n\r\n// Add product function\r\nexport const addProduct = async (productData) => {\r\n  try {\r\n    console.log('Adding product:', productData);\r\n    const response = await apiClient.post('', productData);\r\n    console.log('Product added successfully:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update product function\r\nexport const updateProduct = async (id, productData) => {\r\n  try {\r\n    console.log(`Updating product ${id}:`, productData);\r\n    const response = await apiClient.put(`/${id}`, productData);\r\n    console.log('Product updated successfully:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error updating product ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete product function\r\nexport const deleteProduct = async (productId) => {\r\n  try {\r\n    console.log(`Deleting product ${productId}`);\r\n    await apiClient.delete(`/${productId}`);\r\n    console.log(`Product ${productId} deleted successfully`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error deleting product ${productId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all products function\r\nexport const getAllProducts = async () => {\r\n  try {\r\n    console.log('Fetching all products');\r\n    const response = await apiClient.get('?size=100');\r\n    console.log('Products fetched successfully:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching products:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// For backward compatibility\r\nexport const allProducts = async () => {\r\n  return getAllProducts();\r\n};\r\n\r\n// Method to count products in a specific category\r\nexport const countProductsByCategory = async (categoryId) => {\r\n  try {\r\n    console.log(`Counting products in category ${categoryId}`);\r\n    const response = await apiClient.get(`/count-by-category/${categoryId}`);\r\n    console.log(`Category ${categoryId} count:`, response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error counting products in category ${categoryId}:`, error);\r\n    // Handle 404 specifically\r\n    if (error.response?.status === 404) {\r\n      return 0; // Return 0 for categories with no products\r\n    }\r\n    throw error;\r\n  }\r\n};"],"mappings":"AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,oCAAoC;;AAEzD;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC3C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EAAEK,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAb,SAAS,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CACjCS,QAAQ,IAAIA,QAAQ,EACpBH,KAAK,IAAI;EAAA,IAAAI,oBAAA;EACP;EACA,IAAI,CAACJ,KAAK,CAACG,QAAQ,EAAE;IACnBE,OAAO,CAACL,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACM,OAAO,CAAC;IAC9C;IACA,OAAOL,OAAO,CAACC,MAAM,CAAC,IAAIK,KAAK,CAAC,oFAAoF,CAAC,CAAC;EACxH;;EAEA;EACA,QAAQP,KAAK,CAACG,QAAQ,CAACK,MAAM;IAC3B,KAAK,GAAG;MACNH,OAAO,CAACL,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACG,QAAQ,CAACM,IAAI,CAAC;MAC3D,OAAOR,OAAO,CAACC,MAAM,CAAC,IAAIK,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjF,KAAK,GAAG;MACNF,OAAO,CAACL,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACG,QAAQ,CAACM,IAAI,CAAC;MACvD,OAAOR,OAAO,CAACC,MAAM,CAAC,IAAIK,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxF,KAAK,GAAG;MACNF,OAAO,CAACL,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACG,QAAQ,CAACM,IAAI,CAAC;MACzD,OAAOR,OAAO,CAACC,MAAM,CAAC,IAAIK,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9E;MACEF,OAAO,CAACL,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACG,QAAQ,CAACM,IAAI,CAAC;MAChD,MAAMC,YAAY,GAAG,EAAAN,oBAAA,GAAAJ,KAAK,CAACG,QAAQ,CAACM,IAAI,cAAAL,oBAAA,uBAAnBA,oBAAA,CAAqBE,OAAO,KAAI,SAASN,KAAK,CAACG,QAAQ,CAACK,MAAM,KAAKR,KAAK,CAACG,QAAQ,CAACQ,UAAU,EAAE;MACnH,OAAOV,OAAO,CAACC,MAAM,CAAC,IAAIK,KAAK,CAACG,YAAY,CAAC,CAAC;EAClD;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC/C,IAAI;IACFR,OAAO,CAACS,GAAG,CAAC,iBAAiB,EAAED,WAAW,CAAC;IAC3C,MAAMV,QAAQ,GAAG,MAAMhB,SAAS,CAAC4B,IAAI,CAAC,EAAE,EAAEF,WAAW,CAAC;IACtDR,OAAO,CAACS,GAAG,CAAC,6BAA6B,EAAEX,QAAQ,CAACM,IAAI,CAAC;IACzD,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMgB,aAAa,GAAG,MAAAA,CAAOC,EAAE,EAAEJ,WAAW,KAAK;EACtD,IAAI;IACFR,OAAO,CAACS,GAAG,CAAC,oBAAoBG,EAAE,GAAG,EAAEJ,WAAW,CAAC;IACnD,MAAMV,QAAQ,GAAG,MAAMhB,SAAS,CAAC+B,GAAG,CAAC,IAAID,EAAE,EAAE,EAAEJ,WAAW,CAAC;IAC3DR,OAAO,CAACS,GAAG,CAAC,+BAA+B,EAAEX,QAAQ,CAACM,IAAI,CAAC;IAC3D,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,0BAA0BiB,EAAE,GAAG,EAAEjB,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,aAAa,GAAG,MAAOC,SAAS,IAAK;EAChD,IAAI;IACFf,OAAO,CAACS,GAAG,CAAC,oBAAoBM,SAAS,EAAE,CAAC;IAC5C,MAAMjC,SAAS,CAACkC,MAAM,CAAC,IAAID,SAAS,EAAE,CAAC;IACvCf,OAAO,CAACS,GAAG,CAAC,WAAWM,SAAS,uBAAuB,CAAC;IACxD,OAAO,IAAI;EACb,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,0BAA0BoB,SAAS,GAAG,EAAEpB,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMsB,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACFjB,OAAO,CAACS,GAAG,CAAC,uBAAuB,CAAC;IACpC,MAAMX,QAAQ,GAAG,MAAMhB,SAAS,CAACoC,GAAG,CAAC,WAAW,CAAC;IACjDlB,OAAO,CAACS,GAAG,CAAC,gCAAgC,EAAEX,QAAQ,CAACM,IAAI,CAAC;IAC5D,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMwB,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,OAAOF,cAAc,CAAC,CAAC;AACzB,CAAC;;AAED;AACA,OAAO,MAAMG,uBAAuB,GAAG,MAAOC,UAAU,IAAK;EAC3D,IAAI;IACFrB,OAAO,CAACS,GAAG,CAAC,iCAAiCY,UAAU,EAAE,CAAC;IAC1D,MAAMvB,QAAQ,GAAG,MAAMhB,SAAS,CAACoC,GAAG,CAAC,sBAAsBG,UAAU,EAAE,CAAC;IACxErB,OAAO,CAACS,GAAG,CAAC,YAAYY,UAAU,SAAS,EAAEvB,QAAQ,CAACM,IAAI,CAAC;IAC3D,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOT,KAAK,EAAE;IAAA,IAAA2B,eAAA;IACdtB,OAAO,CAACL,KAAK,CAAC,uCAAuC0B,UAAU,GAAG,EAAE1B,KAAK,CAAC;IAC1E;IACA,IAAI,EAAA2B,eAAA,GAAA3B,KAAK,CAACG,QAAQ,cAAAwB,eAAA,uBAAdA,eAAA,CAAgBnB,MAAM,MAAK,GAAG,EAAE;MAClC,OAAO,CAAC,CAAC,CAAC;IACZ;IACA,MAAMR,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}