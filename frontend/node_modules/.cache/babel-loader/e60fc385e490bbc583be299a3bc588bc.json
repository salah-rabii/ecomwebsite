{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salah\\\\Downloads\\\\project - Copie\\\\src\\\\components\\\\Dashboard\\\\dashboard.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom'; // Use withRouter instead of useNavigate\nimport Logout from '../Autentification/logout';\nimport AuthService from '../Autentification/authservice';\nimport axios from 'axios';\nimport AdminDashboard from './admindashboard';\nimport './style.css';\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\nconst Dashboard = ({\n  history\n}) => {\n  // Use history from props instead of useNavigate\n  const [dashboardData, setDashboardData] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Vérifier si l'utilisateur est connecté\n    if (!AuthService.checkAuthStatus()) {\n      history.replace('/signin'); // Use history.replace instead of navigate\n      return;\n    }\n\n    // Déterminer quelle API appeler en fonction du rôle\n    const dashboardUrl = AuthService.isAdmin() ? 'http://localhost:8080/api/admin/dashboard' // API Admin\n    : 'http://localhost:8080/api/dashboard'; // API utilisateur standard\n\n    // Charger les données du tableau de bord approprié\n    const fetchDashboard = async () => {\n      try {\n        const response = await axios.get(dashboardUrl, {\n          withCredentials: true\n        });\n        setDashboardData(response.data);\n        setError(null);\n      } catch (error) {\n        console.error(\"Erreur lors du chargement du tableau de bord:\", error);\n        setError(\"Impossible de charger les données du tableau de bord\");\n\n        // Si erreur 401 ou 403, rediriger vers login\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n          AuthService.logout();\n          history.replace('/signin'); // Use history.replace instead of navigate\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDashboard();\n  }, [history]); // Change navigate to history\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    }, \"Chargement...\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, AuthService.isAdmin() ? /*#__PURE__*/React.createElement(AdminDashboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), \" \"));\n};\nexport default withRouter(Dashboard); // Wrap with withRouter instead of exporting directly","map":{"version":3,"names":["React","useEffect","useState","withRouter","Logout","AuthService","axios","AdminDashboard","Redirect","Dashboard","history","dashboardData","setDashboardData","loading","setLoading","error","setError","checkAuthStatus","replace","dashboardUrl","isAdmin","fetchDashboard","response","get","withCredentials","data","console","status","logout","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","to"],"sources":["C:/Users/salah/Downloads/project - Copie/src/components/Dashboard/dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom'; // Use withRouter instead of useNavigate\r\nimport Logout from '../Autentification/logout';\r\nimport AuthService from '../Autentification/authservice';\r\nimport axios from 'axios';\r\nimport AdminDashboard from './admindashboard';\r\nimport './style.css';\r\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nconst Dashboard = ({ history }) => { // Use history from props instead of useNavigate\r\n  const [dashboardData, setDashboardData] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Vérifier si l'utilisateur est connecté\r\n    if (!AuthService.checkAuthStatus()) {\r\n      history.replace('/signin'); // Use history.replace instead of navigate\r\n      return;\r\n    }\r\n\r\n    // Déterminer quelle API appeler en fonction du rôle\r\n    const dashboardUrl = AuthService.isAdmin() \r\n      ? 'http://localhost:8080/api/admin/dashboard'  // API Admin\r\n      : 'http://localhost:8080/api/dashboard';       // API utilisateur standard\r\n\r\n    // Charger les données du tableau de bord approprié\r\n    const fetchDashboard = async () => {\r\n      try {\r\n        const response = await axios.get(dashboardUrl, {\r\n          withCredentials: true\r\n        });\r\n        setDashboardData(response.data);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors du chargement du tableau de bord:\", error);\r\n        setError(\"Impossible de charger les données du tableau de bord\");\r\n        \r\n        // Si erreur 401 ou 403, rediriger vers login\r\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n          AuthService.logout();\r\n          history.replace('/signin'); // Use history.replace instead of navigate\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDashboard();\r\n  }, [history]); // Change navigate to history\r\n\r\n  if (loading) {\r\n    return <div>Chargement...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {AuthService.isAdmin() ? (\r\n        <AdminDashboard />\r\n      ) : (\r\n        <>\r\n          <Redirect to=\"/\" /> {/* Redirect to the dashboard if not admin */}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Dashboard); // Wrap with withRouter instead of exporting directly"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}