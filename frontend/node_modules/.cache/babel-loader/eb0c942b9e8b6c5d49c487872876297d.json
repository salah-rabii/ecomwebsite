{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar data = require('./data.cjs.js');\nvar cssVar = require('./utils/css-var.cjs.js');\nvar animation = require('@motionone/animation');\nvar utils = require('@motionone/utils');\nvar transforms = require('./utils/transforms.cjs.js');\nvar easing = require('./utils/easing.cjs.js');\nvar featureDetection = require('./utils/feature-detection.cjs.js');\nvar keyframes = require('./utils/keyframes.cjs.js');\nvar style = require('./style.cjs.js');\nvar getStyleName = require('./utils/get-style-name.cjs.js');\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition, options = {}) {\n  const record = getDevToolsRecord();\n  const isRecording = options.record !== false && record;\n  let animation$1;\n  let {\n    duration = utils.defaults.duration,\n    delay = utils.defaults.delay,\n    endDelay = utils.defaults.endDelay,\n    repeat = utils.defaults.repeat,\n    easing: easing$1 = utils.defaults.easing,\n    direction,\n    offset,\n    allowWebkitAcceleration = false\n  } = options;\n  const data$1 = data.getAnimationData(element);\n  let canAnimateNatively = featureDetection.supports.waapi();\n  const valueIsTransform = transforms.isTransform(key);\n  /**\n   * If this is an individual transform, we need to map its\n   * key to a CSS variable and update the element's transform style\n   */\n  valueIsTransform && transforms.addTransformToElement(element, key);\n  const name = getStyleName.getStyleName(key);\n  const motionValue = data.getMotionValue(data$1.values, name);\n  /**\n   * Get definition of value, this will be used to convert numerical\n   * keyframes into the default value type.\n   */\n  const definition = transforms.transformDefinitions.get(name);\n  /**\n   * Stop the current animation, if any. Because this will trigger\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\n   * this is fired now and we return a factory function to create\n   * the actual animation that can get called in batch,\n   */\n  stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) && options.record !== false);\n  /**\n   * Batchable factory function containing all DOM reads.\n   */\n  return () => {\n    const readInitialValue = () => {\n      var _a, _b;\n      return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\n     * Replace null values with the previous keyframe value, or read\n     * it from the DOM if it's the first keyframe.\n     */\n    let keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\n    if (utils.isEasingGenerator(easing$1)) {\n      const custom = easing$1.createAnimation(keyframes$1, readInitialValue, valueIsTransform, name, motionValue);\n      easing$1 = custom.easing;\n      if (custom.keyframes !== undefined) keyframes$1 = custom.keyframes;\n      if (custom.duration !== undefined) duration = custom.duration;\n    }\n    /**\n     * If this is a CSS variable we need to register it with the browser\n     * before it can be animated natively. We also set it with setProperty\n     * rather than directly onto the element.style object.\n     */\n    if (cssVar.isCssVar(name)) {\n      if (featureDetection.supports.cssRegisterProperty()) {\n        cssVar.registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\n     * If we can animate this value with WAAPI, do so. Currently this only\n     * feature detects CSS.registerProperty but could check WAAPI too.\n     */\n    if (canAnimateNatively) {\n      /**\n       * Convert numbers to default value types. Currently this only supports\n       * transforms but it could also support other value types.\n       */\n      if (definition) {\n        keyframes$1 = keyframes$1.map(value => utils.isNumber(value) ? definition.toDefaultUnit(value) : value);\n      }\n      /**\n       * If this browser doesn't support partial/implicit keyframes we need to\n       * explicitly provide one.\n       */\n      if (keyframes$1.length === 1 && (!featureDetection.supports.partialKeyframes() || isRecording)) {\n        keyframes$1.unshift(readInitialValue());\n      }\n      const animationOptions = {\n        delay: utils.time.ms(delay),\n        duration: utils.time.ms(duration),\n        endDelay: utils.time.ms(endDelay),\n        easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1) : undefined,\n        direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation$1 = element.animate({\n        [name]: keyframes$1,\n        offset,\n        easing: utils.isEasingList(easing$1) ? easing$1.map(easing.convertEasing) : undefined\n      }, animationOptions);\n      /**\n       * Polyfill finished Promise in browsers that don't support it\n       */\n      if (!animation$1.finished) {\n        animation$1.finished = new Promise((resolve, reject) => {\n          animation$1.onfinish = resolve;\n          animation$1.oncancel = reject;\n        });\n      }\n      const target = keyframes$1[keyframes$1.length - 1];\n      animation$1.finished.then(() => {\n        // Apply styles to target\n        style.style.set(element, name, target);\n        // Ensure fill modes don't persist\n        animation$1.cancel();\n      }).catch(utils.noop);\n      /**\n       * This forces Webkit to run animations on the main thread by exploiting\n       * this condition:\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n       *\n       * This fixes Webkit's timing bugs, like accelerated animations falling\n       * out of sync with main thread animations and massive delays in starting\n       * accelerated animations in WKWebView.\n       */\n      if (!allowWebkitAcceleration) animation$1.playbackRate = 1.000001;\n      /**\n       * If we can't animate the value natively then we can fallback to the numbers-only\n       * polyfill for transforms.\n       */\n    } else if (valueIsTransform) {\n      /**\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\n       * it into a number before passing to the Animation polyfill.\n       */\n      keyframes$1 = keyframes$1.map(value => typeof value === \"string\" ? parseFloat(value) : value);\n      /**\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\n       * the current value from the DOM.\n       */\n      if (keyframes$1.length === 1) {\n        keyframes$1.unshift(parseFloat(readInitialValue()));\n      }\n      const render = latest => {\n        if (definition) latest = definition.toDefaultUnit(latest);\n        style.style.set(element, name, latest);\n      };\n      animation$1 = new animation.Animation(render, keyframes$1, Object.assign(Object.assign({}, options), {\n        duration,\n        easing: easing$1\n      }));\n    } else {\n      const target = keyframes$1[keyframes$1.length - 1];\n      style.style.set(element, name, definition && utils.isNumber(target) ? definition.toDefaultUnit(target) : target);\n    }\n    if (isRecording) {\n      record(element, key, keyframes$1, {\n        duration,\n        delay: delay,\n        easing: easing$1,\n        repeat,\n        offset\n      }, \"motion-one\");\n    }\n    motionValue.setAnimation(animation$1);\n    return animation$1;\n  };\n}\nexports.animateStyle = animateStyle;","map":null,"metadata":{},"sourceType":"script"}